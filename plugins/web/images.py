import requests
import re
import math
from PIL import Image
from io import BytesIO

from bot.events import command, Callback, msghandler
from util.services import url
from util.text import unescape

exceptions = {Callback.USAGE: "12Google Images│ "\
                              "Usage: .image [-NUM_RESULTS] <query>",
              Callback.ERROR: "04Google Images│ "\
                              "Error: Could not fetch google image results."}


templates = {'@': "%(color).2d│ 02%(title)s · %(content)s\n"\
                  "%(color).2d│ 12↗ %(url)s · %(width)s×%(height)s · 03%(fullurl)s",
             '.': "%(color).2d│ 12↗ %(url)s · %(width)s×%(height)s · 03%(fullurl)s",
             '!': "%(color).2d│ 12↗ %(url)s · %(width)s×%(height)s · 03%(fullurl)s"}

maxlines = {'@': 1,
            '.': 4,
            '!': 6}
deflines = {'@': 1,
            '.': 1,
            '!': 4}


colors = {(88, 54, 149): '\x0302,04▓', (71, 142, 124): '\x0311,15▓', (42, 140, 42): '\x0f\x0303█', (207, 194, 169): '\x0300,08▓', (63, 114, 63): '\x0303,06▓', (10, 35, 10): '\x0301,03▓', (204, 204, 204): '\x0f\x0300█', (203, 79, 53): '\x0305,08▓', (57, 118, 39): '\x0303,07▓', (56, 101, 101): '\x0310,15▓', (168, 204, 168): '\x0300,09▓', (68, 142, 68): '\x0303,15▓', (176, 55, 176): '\x0f\x0313█', (169, 78, 169): '\x0313,15▓', (190, 58, 88): '\x0304,13▓', (113, 45, 152): '\x0306,12▓', (150, 70, 111): '\x0306,08▓', (6, 21, 21): '\x0301,10▓', (164, 88, 52): '\x0305,09▓', (190, 190, 190): '\x0300,15▓', (174, 159, 77): '\x0308,11▓', (149, 149, 149): '\x0f\x0315█', (206, 138, 92): '\x0308,13▓', (153, 153, 153): '\x0300,01▓', (44, 13, 44): '\x0301,13▓', (63, 170, 103): '\x0309,12▓', (102, 49, 116): '\x0306,10▓', (32, 9, 31): '\x0301,06▓', (89, 52, 146): '\x0302,05▓', (65, 53, 142): '\x0302,07▓', (199, 50, 50): '\x0f\x0305█', (185, 162, 184): '\x0300,06▓', (50, 74, 144): '\x0302,03▓', (36, 81, 121): '\x0310,12▓', (57, 188, 74): '\x0309,11▓', (171, 57, 52): '\x0304,07▓', (43, 140, 60): '\x0303,11▓', (51, 74, 163): '\x0302,11▓', (25, 13, 7): '\x0301,07▓', (17, 17, 57): '\x0301,12▓', (166, 54, 95): '\x0305,12▓', (53, 53, 179): '\x0f\x0302█', (151, 60, 151): '\x0313,14▓', (197, 166, 197): '\x0300,13▓', (172, 172, 172): '\x0300,14▓', (88, 75, 52): '\x0307,11▓', (178, 53, 76): '\x0304,06▓', (181, 143, 67): '\x0308,14▓', (48, 14, 14): '\x0301,04▓', (54, 41, 16): '\x0301,08▓', (83, 53, 178): '\x0302,13▓', (95, 59, 42): '\x0307,14▓', (62, 77, 107): '\x0310,13▓', (77, 77, 171): '\x0302,15▓', (89, 89, 209): '\x0312,15▓', (157, 79, 73): '\x0304,11▓', (195, 59, 59): '\x0f\x0304█', (115, 47, 114): '\x0306,14▓', (163, 61, 101): '\x0304,12▓', (196, 56, 56): '\x0304,05▓', (51, 122, 144): '\x0311,12▓', (180, 141, 106): '\x0308,12▓', (178, 175, 64): '\x0308,09▓', (111, 79, 110): '\x0306,09▓', (164, 188, 182): '\x0300,11▓', (155, 58, 58): '\x0305,10▓', (37, 82, 82): '\x0310,14▓', (217, 166, 65): '\x0f\x0308█', (30, 98, 92): '\x0310,11▓', (52, 174, 67): '\x0309,10▓', (152, 65, 65): '\x0304,10▓', (163, 188, 163): '\x0300,03▓', (89, 166, 89): '\x0309,13▓', (55, 90, 149): '\x0302,09▓', (49, 12, 12): '\x0301,05▓', (161, 95, 59): '\x0304,09▓', (61, 204, 61): '\x0f\x0309█', (128, 38, 127): '\x0f\x0306█', (69, 69, 230): '\x0f\x0312█', (37, 126, 52): '\x0303,10▓', (46, 156, 46): '\x0303,09▓', (193, 51, 81): '\x0305,13▓', (174, 51, 45): '\x0305,07▓', (102, 54, 31): '\x0f\x0307█', (95, 65, 216): '\x0312,13▓', (78, 118, 131): '\x0311,13▓', (140, 42, 139): '\x0306,13▓', (48, 122, 89): '\x0303,12▓', (11, 35, 29): '\x0301,11▓', (94, 94, 94): '\x0314,15▓', (170, 170, 210): '\x0300,12▓', (130, 82, 39): '\x0307,08▓', (94, 81, 150): '\x0302,08▓', (19, 19, 19): '\x0301,14▓', (107, 63, 124): '\x0306,11▓', (64, 172, 64): '\x0309,14▓', (46, 61, 155): '\x0302,10▓', (13, 13, 44): '\x0301,02▓', (53, 124, 106): '\x0311,14▓', (15, 51, 15): '\x0301,09▓', (168, 56, 56): '\x0305,14▓', (120, 54, 67): '\x0307,13▓', (80, 119, 46): '\x0303,04▓', (57, 57, 191): '\x0302,12▓', (37, 37, 37): '\x0301,15▓', (46, 140, 116): '\x0f\x0311█', (169, 145, 70): '\x0308,10▓', (133, 65, 132): '\x0306,15▓', (76, 76, 76): '\x0f\x0314█', (91, 91, 38): '\x0307,09▓', (82, 61, 44): '\x0307,10▓', (75, 118, 75): '\x0303,13▓', (200, 85, 60): '\x0304,08▓', (83, 190, 83): '\x0309,15▓', (58, 58, 153): '\x0302,14▓', (85, 146, 47): '\x0303,08▓', (202, 165, 165): '\x0300,05▓', (50, 124, 50): '\x0303,14▓', (186, 74, 74): '\x0305,15▓', (121, 42, 103): '\x0306,07▓', (201, 167, 167): '\x0300,04▓', (0, 0, 0): '\x0f\x0301█', (159, 174, 174): '\x0300,10▓', (70, 70, 191): '\x0312,14▓', (93, 57, 80): '\x0307,12▓', (113, 77, 60): '\x0307,15▓', (25, 85, 85): '\x0f\x0310█', (178, 166, 160): '\x0300,07▓', (81, 117, 44): '\x0303,05▓', (165, 63, 63): '\x0304,14▓', (200, 161, 86): '\x0308,15▓', (160, 72, 66): '\x0305,11▓', (181, 47, 69): '\x0305,06▓', (183, 81, 81): '\x0304,15▓', (166, 166, 197): '\x0300,02▓', (71, 49, 166): '\x0302,06▓'}
colors.update({(110, 72, 72): '\x0304,10▒', (114, 144, 144): '\x0300,10▒', (172, 102, 96): '\x0306,08▒', (166, 121, 165): '\x0300,06▒', (150, 52, 40): '\x0305,07▒', (197, 54, 54): '\x0304,05▒', (126, 51, 114): '\x0302,05▒', (139, 54, 103): '\x0307,13▒', (210, 185, 134): '\x0300,08▒', (68, 140, 68): '\x0309,14▒', (208, 108, 57): '\x0305,08▒', (61, 108, 96): '\x0311,14▒', (23, 70, 58): '\x0301,11▒', (97, 144, 132): '\x0311,15▒', (183, 157, 107): '\x0308,15▒', (55, 104, 136): '\x0303,12▒', (51, 27, 15): '\x0301,07▒', (77, 53, 105): '\x0302,07▒', (64, 19, 63): '\x0301,06▒', (100, 70, 130): '\x0310,13▒', (146, 121, 70): '\x0308,14▒', (88, 27, 88): '\x0301,13▒', (89, 65, 53): '\x0307,14▒', (185, 57, 117): '\x0304,13▒', (148, 56, 45): '\x0304,07▒', (138, 93, 138): '\x0306,15▒', (176, 176, 176): '\x0300,15▒', (162, 102, 162): '\x0313,15▒', (122, 62, 203): '\x0312,13▒', (34, 34, 115): '\x0301,12▒', (131, 153, 90): '\x0308,11▒', (125, 172, 160): '\x0300,11▒', (47, 96, 110): '\x0302,03▒', (57, 104, 173): '\x0311,12▒', (21, 70, 21): '\x0301,03▒', (174, 99, 99): '\x0305,15▒', (121, 125, 75): '\x0308,10▒', (143, 117, 147): '\x0308,12▒', (39, 69, 132): '\x0302,10▒', (190, 129, 190): '\x0300,13▒', (98, 53, 178): '\x0306,12▒', (74, 97, 73): '\x0307,11▒', (112, 112, 112): '\x0314,15▒', (196, 110, 120): '\x0308,13▒', (61, 61, 204): '\x0302,12▒', (94, 121, 94): '\x0306,09▒', (26, 26, 89): '\x0301,02▒', (118, 99, 50): '\x0303,04▒', (85, 89, 84): '\x0303,06▒', (132, 64, 144): '\x0304,12▒', (38, 38, 38): '\x0301,14▒', (105, 176, 105): '\x0309,15▒', (87, 117, 117): '\x0310,15▒', (99, 25, 25): '\x0301,05▒', (120, 99, 87): '\x0304,11▒', (126, 65, 126): '\x0313,14▒', (136, 136, 217): '\x0300,12▒', (115, 46, 79): '\x0306,07▒', (128, 128, 191): '\x0300,02▒', (122, 95, 83): '\x0305,11▒', (130, 127, 55): '\x0305,09▒', (57, 128, 120): '\x0302,09▒', (187, 52, 113): '\x0305,13▒', (137, 63, 63): '\x0305,14▒', (111, 97, 146): '\x0311,13▒', (51, 172, 51): '\x0303,09▒', (30, 102, 30): '\x0301,09▒', (163, 44, 88): '\x0305,06▒', (72, 72, 153): '\x0312,14▒', (90, 45, 153): '\x0302,06▒', (64, 64, 127): '\x0302,14▒', (72, 97, 36): '\x0303,07▒', (49, 96, 147): '\x0302,11▒', (108, 83, 32): '\x0301,08▒', (134, 59, 140): '\x0305,12▒', (159, 110, 48): '\x0307,08▒', (43, 144, 73): '\x0309,10▒', (139, 185, 63): '\x0308,09▒', (153, 129, 117): '\x0300,07▒', (109, 97, 109): '\x0303,13▒', (140, 140, 140): '\x0300,14▒', (12, 42, 42): '\x0301,10▒', (124, 56, 119): '\x0302,04▒', (87, 89, 121): '\x0306,11▒', (125, 101, 90): '\x0307,15▒', (135, 67, 67): '\x0304,14▒', (152, 46, 151): '\x0306,13▒', (97, 29, 29): '\x0301,04▒', (65, 136, 145): '\x0309,12▒', (102, 102, 102): '\x0300,01▒', (112, 67, 67): '\x0305,10▒', (101, 101, 164): '\x0302,15▒', (114, 54, 177): '\x0302,13▒', (85, 61, 130): '\x0307,12▒', (53, 172, 88): '\x0309,11▒', (118, 129, 118): '\x0309,13▒', (120, 95, 46): '\x0303,05▒', (161, 48, 93): '\x0304,06▒', (199, 131, 131): '\x0300,04▒', (63, 69, 58): '\x0307,10▒', (47, 77, 157): '\x0310,12▒', (123, 172, 123): '\x0300,03▒', (35, 112, 100): '\x0310,11▒', (33, 112, 63): '\x0303,10▒', (206, 112, 62): '\x0304,08▒', (50, 80, 80): '\x0310,14▒', (201, 127, 127): '\x0300,05▒', (102, 57, 101): '\x0306,14▒', (129, 153, 53): '\x0303,08▒', (172, 104, 104): '\x0304,15▒', (44, 140, 79): '\x0303,11▒', (81, 129, 46): '\x0307,09▒', (132, 204, 132): '\x0300,09▒', (76, 61, 106): '\x0306,10▒', (135, 109, 122): '\x0302,08▒', (109, 109, 189): '\x0312,15▒', (74, 74, 74): '\x0301,15▒', (59, 108, 59): '\x0303,14▒', (128, 131, 60): '\x0304,09▒', (95, 144, 95): '\x0303,15▒'})
colors.update({(159, 57, 89): '\x0302,04░', (180, 56, 146): '\x0304,13░', (71, 166, 53): '\x0307,09░', (144, 43, 110): '\x0304,06░', (160, 126, 126): '\x0304,15░', (155, 125, 155): '\x0313,15░', (68, 76, 76): '\x0305,10░', (73, 105, 80): '\x0308,10░', (44, 118, 76): '\x0302,03░', (67, 92, 67): '\x0303,14░', (63, 86, 201): '\x0311,12░', (186, 82, 148): '\x0308,13░', (142, 76, 142): '\x0303,13░', (212, 137, 61): '\x0305,08░', (94, 167, 60): '\x0304,09░', (102, 102, 223): '\x0300,12░', (129, 129, 169): '\x0312,15░', (162, 50, 82): '\x0302,05░', (181, 53, 144): '\x0305,13░', (44, 77, 71): '\x0307,10░', (70, 70, 101): '\x0302,14░', (101, 70, 101): '\x0313,14░', (56, 188, 56): '\x0303,09░', (147, 79, 146): '\x0300,06░', (122, 146, 122): '\x0303,15░', (106, 69, 69): '\x0305,14░', (40, 126, 108): '\x0310,11░', (72, 108, 72): '\x0309,14░', (62, 86, 183): '\x0303,12░', (100, 194, 62): '\x0308,09░', (77, 162, 77): '\x0306,09░', (106, 63, 105): '\x0303,06░', (132, 41, 132): '\x0301,13░', (90, 90, 185): '\x0300,02░', (85, 156, 138): '\x0300,11░', (34, 114, 79): '\x0309,10░', (69, 114, 114): '\x0300,10░', (74, 74, 114): '\x0312,14░', (76, 40, 23): '\x0301,07░', (89, 66, 88): '\x0306,14░', (188, 138, 56): '\x0307,08░', (130, 130, 130): '\x0314,15░', (51, 51, 51): '\x0300,01░', (109, 41, 140): '\x0302,06░', (127, 91, 74): '\x0300,07░', (39, 39, 134): '\x0301,02░', (66, 114, 118): '\x0306,11░', (87, 75, 33): '\x0303,07░', (162, 162, 162): '\x0300,15░', (49, 156, 102): '\x0309,11░', (82, 70, 64): '\x0307,14░', (126, 53, 35): '\x0305,07░', (145, 54, 176): '\x0302,13░', (143, 121, 143): '\x0306,15░', (65, 65, 217): '\x0302,12░', (183, 92, 183): '\x0300,13░', (96, 28, 95): '\x0301,06░', (200, 88, 88): '\x0300,05░', (88, 146, 103): '\x0308,11░', (127, 162, 127): '\x0309,15░', (164, 50, 163): '\x0306,13░', (146, 44, 44): '\x0301,04░', (166, 153, 128): '\x0308,15░', (67, 78, 78): '\x0304,10░', (138, 62, 153): '\x0310,13░', (108, 108, 108): '\x0300,14░', (89, 53, 68): '\x0302,07░', (106, 93, 188): '\x0308,12░', (125, 125, 156): '\x0302,15░', (162, 124, 48): '\x0301,08░', (58, 73, 193): '\x0310,12░', (59, 166, 90): '\x0302,09░', (60, 118, 94): '\x0307,11░', (18, 63, 63): '\x0301,10░', (31, 105, 31): '\x0301,03░', (82, 156, 82): '\x0300,03░', (161, 124, 124): '\x0305,15░', (111, 98, 73): '\x0308,14░', (159, 72, 48): '\x0303,05░', (143, 76, 161): '\x0311,13░', (125, 55, 38): '\x0304,07░', (57, 57, 57): '\x0301,14░', (194, 134, 80): '\x0306,08░', (197, 95, 95): '\x0300,04░', (147, 92, 147): '\x0309,13░', (47, 118, 131): '\x0302,11░', (108, 50, 55): '\x0306,07░', (67, 102, 187): '\x0309,12░', (149, 37, 37): '\x0301,05░', (50, 73, 95): '\x0306,10░', (84, 117, 99): '\x0305,11░', (149, 58, 189): '\x0312,13░', (157, 54, 139): '\x0307,13░', (156, 79, 54): '\x0303,04░', (83, 119, 101): '\x0304,11░', (45, 153, 45): '\x0301,09░', (211, 139, 63): '\x0304,08░', (83, 61, 204): '\x0306,12░', (100, 66, 187): '\x0304,12░', (29, 98, 74): '\x0303,10░', (213, 175, 99): '\x0300,08░', (118, 133, 133): '\x0310,15░', (101, 64, 185): '\x0305,12░', (105, 71, 71): '\x0304,14░', (96, 204, 96): '\x0300,09░', (34, 105, 87): '\x0301,11░', (123, 146, 140): '\x0311,15░', (198, 52, 52): '\x0304,05░', (145, 41, 107): '\x0305,06░', (68, 92, 86): '\x0311,14░', (77, 65, 180): '\x0307,12░', (45, 140, 97): '\x0303,11░', (111, 111, 111): '\x0301,15░', (51, 51, 172): '\x0301,12░', (63, 78, 78): '\x0310,14░', (95, 165, 58): '\x0305,09░', (137, 125, 119): '\x0307,15░', (32, 77, 108): '\x0302,10░', (176, 137, 93): '\x0302,08░', (173, 159, 59): '\x0303,08░'})



@command("image img", r"(-[fpclgs\d]+\s+)?(.+)", templates=exceptions)
def image(server, msg, flags, query):
    """
    Image search.

    Search for the given terms on Google. If a number is given, it will display
    that result.

    Code adapted from kochira :v
    """

    params = {
            "safe": "off",
            "v": "1.0",
            "rsz": deflines[msg.prefix],
            "q": query
        }

    if flags:
        for i in flags[1:].strip():
            if i.isdigit():
                params["rsz"] = min(int(i), maxlines[msg.prefix])
            else:
                params.update({"f": {"imgtype": "face"},
                               "p": {"imgtype": "photo"},
                               "c": {"imgtype": "clipart"},
                               "l": {"imgtype": "lineart"},
                               "g": {"as_filetype": "gif"},
                               "s": {"safe": "active"}
                }[i])
                

    r = requests.get(
        "https://ajax.googleapis.com/ajax/services/search/images",
        params=params
    ).json()

    results = r.get("responseData", {}).get("results", [])

    for i, result in enumerate(results):
        server.lasturl = result["url"]
        yield templates[msg.prefix] % {"color" : [12, 5, 8, 3][i % 4],
                                       "url": url.shorten(result["url"]),
                                       "fullurl": result["visibleUrl"],
                                       "width": result["width"],
                                       "height": result["height"],  
                                       "content": unescape(re.sub("</?b>", "", 
                                                    result["content"])),
                                       "title": unescape(re.sub("</?b>", "", 
                                                    result["title"]))}
    if not results:
        yield "12Google Images│ No results."

@command("gif", r"(-[fpclgs\d]\s+)?(.+)", templates=exceptions)
def gif(server, msg, flags, query):
    flags = "-g" + (flags or "").strip("-")
    yield from image.funct(server, msg, flags, query)
    
@command("face", r"(-[fpclgs\d]\s+)?(.+)", templates=exceptions)
def face(server, msg, flags, query):
    flags = "-f" + (flags or "").strip("-")
    yield from image.funct(server, msg, flags, query)

@command("photo", r"(-[fpclgs\d]\s+)?(.+)", templates=exceptions)
def photo(server, msg, flags, query):
    flags = "-p" + (flags or "").strip("-")
    yield from image.funct(server, msg, flags, query)

@command("clipart", r"(-[fpclgs\d]\s+)?(.+)", templates=exceptions)
def clipart(server, msg, flags, query):
    flags = "-c" + (flags or "").strip("-")
    yield from image.funct(server, msg, flags, query)

@command("lineart", r"(-[fpclgs\d]\s+)?(.+)", templates=exceptions)
def lineart(server, msg, flags, query):
    flags = "-l" + (flags or "").strip("-")
    yield from image.funct(server, msg, flags, query)

def nearestColor(c):
    return min(colors.keys(), key=lambda x: math.sqrt(sum((v-c[i])**2 for i, v in enumerate(x))))

@command("view", "(.*)")
@Callback.threadsafe
def asciiart(server, msg, url):
    if not url:
        url = server.lasturl
    elif not url.startswith("http"):
        params = {
            "safe": "off",
            "v": "1.0",
            "rsz": 1,
            "q": url
        }
        url = requests.get(
          "https://ajax.googleapis.com/ajax/services/search/images",
          params=params
        ).json()["responseData"]["results"][0]["url"]
    server.lasturl = url
    if msg.prefix == "!": 
        k = 16
    else: 
        k = 6

    data = requests.get(url).content
    data = BytesIO(data)
    img = Image.open(data)
    scalefactor = min(img.size[0]*3/k, img.size[1]/k)
    img = img.resize((int(img.size[0]*3/scalefactor), int(img.size[1]/scalefactor)))
    if img.size[0] > 40:
        scalefactor = 40 / img.size[0]
        img = img.resize((int(scalefactor * img.size[0]), int(scalefactor * img.size[1])))
    return "\n".join("".join(colors[nearestColor(img.getpixel((i, j)))] for i in range(img.size[0])) for j in range(img.size[1]))

@msghandler
def urlcache(server, msg):
    urls = [i for i in msg.text.split() if i.startswith("http")]
    if urls:
        server.lasturl = urls[-1]

__callbacks__ = {"privmsg": [image, gif, face, photo, clipart, lineart, asciiart, urlcache]}